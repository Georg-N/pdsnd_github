import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # get user input for city (chicago, new york city, washington).
    city = input("Please enter the name of the city to be analyzed. Choose either Chicago, New York City, or Washington.\n").lower()
    while city != "chicago" and city != "new york city" and city != "washington":
        city = input("You have typed in an incorrect city name. Please type in either Chicago, New York City or Washington.\n").lower()
    
    # ask user whether he wants to filter month, day, both or not at all
    m_d_filter = input("Would you like to filter the data by month, day, both or not at all?\n").lower()
    while m_d_filter != "month" and m_d_filter != "day" and m_d_filter != "both" and m_d_filter != "not at all":
        m_d_filter = input("You have entered an incorrect selection. Please type in either month, day, both or not at all.\n").lower()
    
    # get user input for month (all, january, february, ... , june)
    if m_d_filter == "both" or m_d_filter =="month":
        month = input("For which months do you want to select the data. Choose either all, January, February, March, April, May or June?\n").lower()
        while month != "all" and month != "january" and month != "february" and month != "march" and month != "april" and month != "may" and month != "june":
            month = input("You have typed in an incorrect month. Please type in either all, January, February, March, April, May or June?\n").lower()
    else:
        month = "all"
    
    # get user input for day of week (all, monday, tuesday, ... sunday)
    if m_d_filter == "both" or m_d_filter =="day":
        day = input("For which day of week do you want to select the data? Type in all, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday or Sunday.\n").lower()
        while day != "all" and day != "monday" and day != "tuesday" and day != "wednesday" and day != "thursday" and day != "friday" and day != "saturday" and day != "friday":
            day = input("You have typed in an incorrect day. Please type in either all, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday or Sunday.\n").lower()
    else:
        day = "all"    
            
    print('-'*40)
    return city, month, day

def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])

    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name

    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1

        # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]

    return df

def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    month = df['month'].mode()[0]
    months = ['january', 'february', 'march', 'april', 'may', 'june']
    popular_month = months[month - 1].title()
    print('Most Common Month:', popular_month)
    
    # display the most common day of week
    popular_day = df['day_of_week'].mode()[0]
    print('Most Common Day of Week:', popular_day)

    # display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    popular_hour = df['hour'].mode()[0]
    print('Most Common Start Hour:', popular_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    popular_start_station = df['Start Station'].mode()[0]
    print("Most commonly used start station:", popular_start_station)

    # display most commonly used end station
    popular_end_station = df['End Station'].mode()[0]
    print("Most commonly used end station:", popular_end_station)

    # display most frequent combination of start station and end station trip
    df["Combined Start and End Station"] = df["Start Station"] + " / " + df["End Station"]
    popular_start_end_station = df['Combined Start and End Station'].mode()[0]
    print("Most frequent combination of start station and end station trip:", popular_start_end_station)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    total_travel_time = df["Trip Duration"].sum()
    print("Total Travel Time: ", total_travel_time)
    # display mean travel time
    mean_travel_time = df["Trip Duration"].mean()
    print("Mean Travel Time: ", mean_travel_time)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
def user_stats(df, city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    user_types = df["User Type"].value_counts()
    print("The counts of user types are:\n", user_types)

    # Display counts of gender
    if city == "chicago" or city == "new york city":
        gender = df["Gender"].value_counts()
        print("\nThe counts of gender are:\n", gender)

    # Display earliest, most recent, and most common year of birth
    if city == "chicago" or city == "new york city":
        min_date = df["Birth Year"].min()
        print("\nThe earliest year of birth: ", min_date)
        max_date = df["Birth Year"].max()
        print("\nThe most recent year of birth: ", max_date)
        common_date = df["Birth Year"].mode()[0]
        print("\nThe most common year of birth: ", common_date)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
def display_raw_data(df):
    """Display raw data if user wants"""
    
    row_counter = 0
    while True:
        display = input("Would you like to see the first/next 5 rows of the raw data? Enter yes or no.\n").lower()
        if display == "no":
            break
        elif display == "yes":
            print(df[row_counter:row_counter+5])
            row_counter += 5
        else:
            print("Your entry is incorrect. Please enter either yes or no.")

def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df, city)
        display_raw_data(df)
        
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()